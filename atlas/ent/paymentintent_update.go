// Code generated by ent, DO NOT EDIT.

package ent

import (
	"atlas/ent/paymentattempt"
	"atlas/ent/paymentintent"
	"atlas/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentIntentUpdate is the builder for updating PaymentIntent entities.
type PaymentIntentUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentIntentMutation
}

// Where appends a list predicates to the PaymentIntentUpdate builder.
func (piu *PaymentIntentUpdate) Where(ps ...predicate.PaymentIntent) *PaymentIntentUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetCustomerEmail sets the "customer_email" field.
func (piu *PaymentIntentUpdate) SetCustomerEmail(s string) *PaymentIntentUpdate {
	piu.mutation.SetCustomerEmail(s)
	return piu
}

// SetCustomerPhone sets the "customer_phone" field.
func (piu *PaymentIntentUpdate) SetCustomerPhone(s string) *PaymentIntentUpdate {
	piu.mutation.SetCustomerPhone(s)
	return piu
}

// SetCustomerAddress sets the "customer_address" field.
func (piu *PaymentIntentUpdate) SetCustomerAddress(s string) *PaymentIntentUpdate {
	piu.mutation.SetCustomerAddress(s)
	return piu
}

// SetStatus sets the "status" field.
func (piu *PaymentIntentUpdate) SetStatus(s string) *PaymentIntentUpdate {
	piu.mutation.SetStatus(s)
	return piu
}

// SetAmount sets the "amount" field.
func (piu *PaymentIntentUpdate) SetAmount(f float64) *PaymentIntentUpdate {
	piu.mutation.ResetAmount()
	piu.mutation.SetAmount(f)
	return piu
}

// AddAmount adds f to the "amount" field.
func (piu *PaymentIntentUpdate) AddAmount(f float64) *PaymentIntentUpdate {
	piu.mutation.AddAmount(f)
	return piu
}

// SetCurrency sets the "currency" field.
func (piu *PaymentIntentUpdate) SetCurrency(s string) *PaymentIntentUpdate {
	piu.mutation.SetCurrency(s)
	return piu
}

// SetAddedOn sets the "added_on" field.
func (piu *PaymentIntentUpdate) SetAddedOn(t time.Time) *PaymentIntentUpdate {
	piu.mutation.SetAddedOn(t)
	return piu
}

// SetNillableAddedOn sets the "added_on" field if the given value is not nil.
func (piu *PaymentIntentUpdate) SetNillableAddedOn(t *time.Time) *PaymentIntentUpdate {
	if t != nil {
		piu.SetAddedOn(*t)
	}
	return piu
}

// ClearAddedOn clears the value of the "added_on" field.
func (piu *PaymentIntentUpdate) ClearAddedOn() *PaymentIntentUpdate {
	piu.mutation.ClearAddedOn()
	return piu
}

// SetUpdatedOn sets the "updated_on" field.
func (piu *PaymentIntentUpdate) SetUpdatedOn(t time.Time) *PaymentIntentUpdate {
	piu.mutation.SetUpdatedOn(t)
	return piu
}

// SetNillableUpdatedOn sets the "updated_on" field if the given value is not nil.
func (piu *PaymentIntentUpdate) SetNillableUpdatedOn(t *time.Time) *PaymentIntentUpdate {
	if t != nil {
		piu.SetUpdatedOn(*t)
	}
	return piu
}

// ClearUpdatedOn clears the value of the "updated_on" field.
func (piu *PaymentIntentUpdate) ClearUpdatedOn() *PaymentIntentUpdate {
	piu.mutation.ClearUpdatedOn()
	return piu
}

// AddPaymentAttemptIDs adds the "payment_attempts" edge to the PaymentAttempt entity by IDs.
func (piu *PaymentIntentUpdate) AddPaymentAttemptIDs(ids ...int) *PaymentIntentUpdate {
	piu.mutation.AddPaymentAttemptIDs(ids...)
	return piu
}

// AddPaymentAttempts adds the "payment_attempts" edges to the PaymentAttempt entity.
func (piu *PaymentIntentUpdate) AddPaymentAttempts(p ...*PaymentAttempt) *PaymentIntentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.AddPaymentAttemptIDs(ids...)
}

// Mutation returns the PaymentIntentMutation object of the builder.
func (piu *PaymentIntentUpdate) Mutation() *PaymentIntentMutation {
	return piu.mutation
}

// ClearPaymentAttempts clears all "payment_attempts" edges to the PaymentAttempt entity.
func (piu *PaymentIntentUpdate) ClearPaymentAttempts() *PaymentIntentUpdate {
	piu.mutation.ClearPaymentAttempts()
	return piu
}

// RemovePaymentAttemptIDs removes the "payment_attempts" edge to PaymentAttempt entities by IDs.
func (piu *PaymentIntentUpdate) RemovePaymentAttemptIDs(ids ...int) *PaymentIntentUpdate {
	piu.mutation.RemovePaymentAttemptIDs(ids...)
	return piu
}

// RemovePaymentAttempts removes "payment_attempts" edges to PaymentAttempt entities.
func (piu *PaymentIntentUpdate) RemovePaymentAttempts(p ...*PaymentAttempt) *PaymentIntentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.RemovePaymentAttemptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PaymentIntentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PaymentIntentUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PaymentIntentUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PaymentIntentUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *PaymentIntentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymentintent.Table, paymentintent.Columns, sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.CustomerEmail(); ok {
		_spec.SetField(paymentintent.FieldCustomerEmail, field.TypeString, value)
	}
	if value, ok := piu.mutation.CustomerPhone(); ok {
		_spec.SetField(paymentintent.FieldCustomerPhone, field.TypeString, value)
	}
	if value, ok := piu.mutation.CustomerAddress(); ok {
		_spec.SetField(paymentintent.FieldCustomerAddress, field.TypeString, value)
	}
	if value, ok := piu.mutation.Status(); ok {
		_spec.SetField(paymentintent.FieldStatus, field.TypeString, value)
	}
	if value, ok := piu.mutation.Amount(); ok {
		_spec.SetField(paymentintent.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := piu.mutation.AddedAmount(); ok {
		_spec.AddField(paymentintent.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := piu.mutation.Currency(); ok {
		_spec.SetField(paymentintent.FieldCurrency, field.TypeString, value)
	}
	if value, ok := piu.mutation.AddedOn(); ok {
		_spec.SetField(paymentintent.FieldAddedOn, field.TypeTime, value)
	}
	if piu.mutation.AddedOnCleared() {
		_spec.ClearField(paymentintent.FieldAddedOn, field.TypeTime)
	}
	if value, ok := piu.mutation.UpdatedOn(); ok {
		_spec.SetField(paymentintent.FieldUpdatedOn, field.TypeTime, value)
	}
	if piu.mutation.UpdatedOnCleared() {
		_spec.ClearField(paymentintent.FieldUpdatedOn, field.TypeTime)
	}
	if piu.mutation.PaymentAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentintent.PaymentAttemptsTable,
			Columns: []string{paymentintent.PaymentAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedPaymentAttemptsIDs(); len(nodes) > 0 && !piu.mutation.PaymentAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentintent.PaymentAttemptsTable,
			Columns: []string{paymentintent.PaymentAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.PaymentAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentintent.PaymentAttemptsTable,
			Columns: []string{paymentintent.PaymentAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentintent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PaymentIntentUpdateOne is the builder for updating a single PaymentIntent entity.
type PaymentIntentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentIntentMutation
}

// SetCustomerEmail sets the "customer_email" field.
func (piuo *PaymentIntentUpdateOne) SetCustomerEmail(s string) *PaymentIntentUpdateOne {
	piuo.mutation.SetCustomerEmail(s)
	return piuo
}

// SetCustomerPhone sets the "customer_phone" field.
func (piuo *PaymentIntentUpdateOne) SetCustomerPhone(s string) *PaymentIntentUpdateOne {
	piuo.mutation.SetCustomerPhone(s)
	return piuo
}

// SetCustomerAddress sets the "customer_address" field.
func (piuo *PaymentIntentUpdateOne) SetCustomerAddress(s string) *PaymentIntentUpdateOne {
	piuo.mutation.SetCustomerAddress(s)
	return piuo
}

// SetStatus sets the "status" field.
func (piuo *PaymentIntentUpdateOne) SetStatus(s string) *PaymentIntentUpdateOne {
	piuo.mutation.SetStatus(s)
	return piuo
}

// SetAmount sets the "amount" field.
func (piuo *PaymentIntentUpdateOne) SetAmount(f float64) *PaymentIntentUpdateOne {
	piuo.mutation.ResetAmount()
	piuo.mutation.SetAmount(f)
	return piuo
}

// AddAmount adds f to the "amount" field.
func (piuo *PaymentIntentUpdateOne) AddAmount(f float64) *PaymentIntentUpdateOne {
	piuo.mutation.AddAmount(f)
	return piuo
}

// SetCurrency sets the "currency" field.
func (piuo *PaymentIntentUpdateOne) SetCurrency(s string) *PaymentIntentUpdateOne {
	piuo.mutation.SetCurrency(s)
	return piuo
}

// SetAddedOn sets the "added_on" field.
func (piuo *PaymentIntentUpdateOne) SetAddedOn(t time.Time) *PaymentIntentUpdateOne {
	piuo.mutation.SetAddedOn(t)
	return piuo
}

// SetNillableAddedOn sets the "added_on" field if the given value is not nil.
func (piuo *PaymentIntentUpdateOne) SetNillableAddedOn(t *time.Time) *PaymentIntentUpdateOne {
	if t != nil {
		piuo.SetAddedOn(*t)
	}
	return piuo
}

// ClearAddedOn clears the value of the "added_on" field.
func (piuo *PaymentIntentUpdateOne) ClearAddedOn() *PaymentIntentUpdateOne {
	piuo.mutation.ClearAddedOn()
	return piuo
}

// SetUpdatedOn sets the "updated_on" field.
func (piuo *PaymentIntentUpdateOne) SetUpdatedOn(t time.Time) *PaymentIntentUpdateOne {
	piuo.mutation.SetUpdatedOn(t)
	return piuo
}

// SetNillableUpdatedOn sets the "updated_on" field if the given value is not nil.
func (piuo *PaymentIntentUpdateOne) SetNillableUpdatedOn(t *time.Time) *PaymentIntentUpdateOne {
	if t != nil {
		piuo.SetUpdatedOn(*t)
	}
	return piuo
}

// ClearUpdatedOn clears the value of the "updated_on" field.
func (piuo *PaymentIntentUpdateOne) ClearUpdatedOn() *PaymentIntentUpdateOne {
	piuo.mutation.ClearUpdatedOn()
	return piuo
}

// AddPaymentAttemptIDs adds the "payment_attempts" edge to the PaymentAttempt entity by IDs.
func (piuo *PaymentIntentUpdateOne) AddPaymentAttemptIDs(ids ...int) *PaymentIntentUpdateOne {
	piuo.mutation.AddPaymentAttemptIDs(ids...)
	return piuo
}

// AddPaymentAttempts adds the "payment_attempts" edges to the PaymentAttempt entity.
func (piuo *PaymentIntentUpdateOne) AddPaymentAttempts(p ...*PaymentAttempt) *PaymentIntentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.AddPaymentAttemptIDs(ids...)
}

// Mutation returns the PaymentIntentMutation object of the builder.
func (piuo *PaymentIntentUpdateOne) Mutation() *PaymentIntentMutation {
	return piuo.mutation
}

// ClearPaymentAttempts clears all "payment_attempts" edges to the PaymentAttempt entity.
func (piuo *PaymentIntentUpdateOne) ClearPaymentAttempts() *PaymentIntentUpdateOne {
	piuo.mutation.ClearPaymentAttempts()
	return piuo
}

// RemovePaymentAttemptIDs removes the "payment_attempts" edge to PaymentAttempt entities by IDs.
func (piuo *PaymentIntentUpdateOne) RemovePaymentAttemptIDs(ids ...int) *PaymentIntentUpdateOne {
	piuo.mutation.RemovePaymentAttemptIDs(ids...)
	return piuo
}

// RemovePaymentAttempts removes "payment_attempts" edges to PaymentAttempt entities.
func (piuo *PaymentIntentUpdateOne) RemovePaymentAttempts(p ...*PaymentAttempt) *PaymentIntentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.RemovePaymentAttemptIDs(ids...)
}

// Where appends a list predicates to the PaymentIntentUpdate builder.
func (piuo *PaymentIntentUpdateOne) Where(ps ...predicate.PaymentIntent) *PaymentIntentUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PaymentIntentUpdateOne) Select(field string, fields ...string) *PaymentIntentUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PaymentIntent entity.
func (piuo *PaymentIntentUpdateOne) Save(ctx context.Context) (*PaymentIntent, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PaymentIntentUpdateOne) SaveX(ctx context.Context) *PaymentIntent {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PaymentIntentUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PaymentIntentUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *PaymentIntentUpdateOne) sqlSave(ctx context.Context) (_node *PaymentIntent, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymentintent.Table, paymentintent.Columns, sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentIntent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentintent.FieldID)
		for _, f := range fields {
			if !paymentintent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentintent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.CustomerEmail(); ok {
		_spec.SetField(paymentintent.FieldCustomerEmail, field.TypeString, value)
	}
	if value, ok := piuo.mutation.CustomerPhone(); ok {
		_spec.SetField(paymentintent.FieldCustomerPhone, field.TypeString, value)
	}
	if value, ok := piuo.mutation.CustomerAddress(); ok {
		_spec.SetField(paymentintent.FieldCustomerAddress, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Status(); ok {
		_spec.SetField(paymentintent.FieldStatus, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Amount(); ok {
		_spec.SetField(paymentintent.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := piuo.mutation.AddedAmount(); ok {
		_spec.AddField(paymentintent.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := piuo.mutation.Currency(); ok {
		_spec.SetField(paymentintent.FieldCurrency, field.TypeString, value)
	}
	if value, ok := piuo.mutation.AddedOn(); ok {
		_spec.SetField(paymentintent.FieldAddedOn, field.TypeTime, value)
	}
	if piuo.mutation.AddedOnCleared() {
		_spec.ClearField(paymentintent.FieldAddedOn, field.TypeTime)
	}
	if value, ok := piuo.mutation.UpdatedOn(); ok {
		_spec.SetField(paymentintent.FieldUpdatedOn, field.TypeTime, value)
	}
	if piuo.mutation.UpdatedOnCleared() {
		_spec.ClearField(paymentintent.FieldUpdatedOn, field.TypeTime)
	}
	if piuo.mutation.PaymentAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentintent.PaymentAttemptsTable,
			Columns: []string{paymentintent.PaymentAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedPaymentAttemptsIDs(); len(nodes) > 0 && !piuo.mutation.PaymentAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentintent.PaymentAttemptsTable,
			Columns: []string{paymentintent.PaymentAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.PaymentAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentintent.PaymentAttemptsTable,
			Columns: []string{paymentintent.PaymentAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentIntent{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentintent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
