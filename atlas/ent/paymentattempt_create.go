// Code generated by ent, DO NOT EDIT.

package ent

import (
	"atlas/ent/paymentattempt"
	"atlas/ent/paymentintent"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentAttemptCreate is the builder for creating a PaymentAttempt entity.
type PaymentAttemptCreate struct {
	config
	mutation *PaymentAttemptMutation
	hooks    []Hook
}

// SetPaymentIntentID sets the "payment_intent_id" field.
func (pac *PaymentAttemptCreate) SetPaymentIntentID(i int) *PaymentAttemptCreate {
	pac.mutation.SetPaymentIntentID(i)
	return pac
}

// SetPaymentMethod sets the "payment_method" field.
func (pac *PaymentAttemptCreate) SetPaymentMethod(s string) *PaymentAttemptCreate {
	pac.mutation.SetPaymentMethod(s)
	return pac
}

// SetProcessor sets the "processor" field.
func (pac *PaymentAttemptCreate) SetProcessor(s string) *PaymentAttemptCreate {
	pac.mutation.SetProcessor(s)
	return pac
}

// SetNillableProcessor sets the "processor" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableProcessor(s *string) *PaymentAttemptCreate {
	if s != nil {
		pac.SetProcessor(*s)
	}
	return pac
}

// SetProcessorRef sets the "processor_ref" field.
func (pac *PaymentAttemptCreate) SetProcessorRef(s string) *PaymentAttemptCreate {
	pac.mutation.SetProcessorRef(s)
	return pac
}

// SetNillableProcessorRef sets the "processor_ref" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableProcessorRef(s *string) *PaymentAttemptCreate {
	if s != nil {
		pac.SetProcessorRef(*s)
	}
	return pac
}

// SetMetadata sets the "metadata" field.
func (pac *PaymentAttemptCreate) SetMetadata(s string) *PaymentAttemptCreate {
	pac.mutation.SetMetadata(s)
	return pac
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableMetadata(s *string) *PaymentAttemptCreate {
	if s != nil {
		pac.SetMetadata(*s)
	}
	return pac
}

// SetPaymentHash sets the "payment_hash" field.
func (pac *PaymentAttemptCreate) SetPaymentHash(s string) *PaymentAttemptCreate {
	pac.mutation.SetPaymentHash(s)
	return pac
}

// SetNillablePaymentHash sets the "payment_hash" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillablePaymentHash(s *string) *PaymentAttemptCreate {
	if s != nil {
		pac.SetPaymentHash(*s)
	}
	return pac
}

// SetStatus sets the "status" field.
func (pac *PaymentAttemptCreate) SetStatus(s string) *PaymentAttemptCreate {
	pac.mutation.SetStatus(s)
	return pac
}

// SetAmount sets the "amount" field.
func (pac *PaymentAttemptCreate) SetAmount(f float64) *PaymentAttemptCreate {
	pac.mutation.SetAmount(f)
	return pac
}

// SetCurrency sets the "currency" field.
func (pac *PaymentAttemptCreate) SetCurrency(s string) *PaymentAttemptCreate {
	pac.mutation.SetCurrency(s)
	return pac
}

// SetAddedOn sets the "added_on" field.
func (pac *PaymentAttemptCreate) SetAddedOn(t time.Time) *PaymentAttemptCreate {
	pac.mutation.SetAddedOn(t)
	return pac
}

// SetNillableAddedOn sets the "added_on" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableAddedOn(t *time.Time) *PaymentAttemptCreate {
	if t != nil {
		pac.SetAddedOn(*t)
	}
	return pac
}

// SetUpdatedOn sets the "updated_on" field.
func (pac *PaymentAttemptCreate) SetUpdatedOn(t time.Time) *PaymentAttemptCreate {
	pac.mutation.SetUpdatedOn(t)
	return pac
}

// SetNillableUpdatedOn sets the "updated_on" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableUpdatedOn(t *time.Time) *PaymentAttemptCreate {
	if t != nil {
		pac.SetUpdatedOn(*t)
	}
	return pac
}

// SetID sets the "id" field.
func (pac *PaymentAttemptCreate) SetID(i int) *PaymentAttemptCreate {
	pac.mutation.SetID(i)
	return pac
}

// SetPaymentIntent sets the "payment_intent" edge to the PaymentIntent entity.
func (pac *PaymentAttemptCreate) SetPaymentIntent(p *PaymentIntent) *PaymentAttemptCreate {
	return pac.SetPaymentIntentID(p.ID)
}

// Mutation returns the PaymentAttemptMutation object of the builder.
func (pac *PaymentAttemptCreate) Mutation() *PaymentAttemptMutation {
	return pac.mutation
}

// Save creates the PaymentAttempt in the database.
func (pac *PaymentAttemptCreate) Save(ctx context.Context) (*PaymentAttempt, error) {
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PaymentAttemptCreate) SaveX(ctx context.Context) *PaymentAttempt {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PaymentAttemptCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PaymentAttemptCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PaymentAttemptCreate) check() error {
	if _, ok := pac.mutation.PaymentIntentID(); !ok {
		return &ValidationError{Name: "payment_intent_id", err: errors.New(`ent: missing required field "PaymentAttempt.payment_intent_id"`)}
	}
	if _, ok := pac.mutation.PaymentMethod(); !ok {
		return &ValidationError{Name: "payment_method", err: errors.New(`ent: missing required field "PaymentAttempt.payment_method"`)}
	}
	if _, ok := pac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PaymentAttempt.status"`)}
	}
	if _, ok := pac.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "PaymentAttempt.amount"`)}
	}
	if _, ok := pac.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "PaymentAttempt.currency"`)}
	}
	if _, ok := pac.mutation.PaymentIntentID(); !ok {
		return &ValidationError{Name: "payment_intent", err: errors.New(`ent: missing required edge "PaymentAttempt.payment_intent"`)}
	}
	return nil
}

func (pac *PaymentAttemptCreate) sqlSave(ctx context.Context) (*PaymentAttempt, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PaymentAttemptCreate) createSpec() (*PaymentAttempt, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentAttempt{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(paymentattempt.Table, sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeInt))
	)
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pac.mutation.PaymentMethod(); ok {
		_spec.SetField(paymentattempt.FieldPaymentMethod, field.TypeString, value)
		_node.PaymentMethod = value
	}
	if value, ok := pac.mutation.Processor(); ok {
		_spec.SetField(paymentattempt.FieldProcessor, field.TypeString, value)
		_node.Processor = value
	}
	if value, ok := pac.mutation.ProcessorRef(); ok {
		_spec.SetField(paymentattempt.FieldProcessorRef, field.TypeString, value)
		_node.ProcessorRef = value
	}
	if value, ok := pac.mutation.Metadata(); ok {
		_spec.SetField(paymentattempt.FieldMetadata, field.TypeString, value)
		_node.Metadata = value
	}
	if value, ok := pac.mutation.PaymentHash(); ok {
		_spec.SetField(paymentattempt.FieldPaymentHash, field.TypeString, value)
		_node.PaymentHash = value
	}
	if value, ok := pac.mutation.Status(); ok {
		_spec.SetField(paymentattempt.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pac.mutation.Amount(); ok {
		_spec.SetField(paymentattempt.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := pac.mutation.Currency(); ok {
		_spec.SetField(paymentattempt.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := pac.mutation.AddedOn(); ok {
		_spec.SetField(paymentattempt.FieldAddedOn, field.TypeTime, value)
		_node.AddedOn = value
	}
	if value, ok := pac.mutation.UpdatedOn(); ok {
		_spec.SetField(paymentattempt.FieldUpdatedOn, field.TypeTime, value)
		_node.UpdatedOn = value
	}
	if nodes := pac.mutation.PaymentIntentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentattempt.PaymentIntentTable,
			Columns: []string{paymentattempt.PaymentIntentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PaymentIntentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentAttemptCreateBulk is the builder for creating many PaymentAttempt entities in bulk.
type PaymentAttemptCreateBulk struct {
	config
	builders []*PaymentAttemptCreate
}

// Save creates the PaymentAttempt entities in the database.
func (pacb *PaymentAttemptCreateBulk) Save(ctx context.Context) ([]*PaymentAttempt, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PaymentAttempt, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentAttemptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PaymentAttemptCreateBulk) SaveX(ctx context.Context) []*PaymentAttempt {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PaymentAttemptCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PaymentAttemptCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}
