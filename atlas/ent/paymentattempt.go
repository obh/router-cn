// Code generated by ent, DO NOT EDIT.

package ent

import (
	"atlas/ent/paymentattempt"
	"atlas/ent/paymentintent"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaymentAttempt is the model entity for the PaymentAttempt schema.
type PaymentAttempt struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PaymentIntentID holds the value of the "payment_intent_id" field.
	PaymentIntentID int `json:"payment_intent_id,omitempty"`
	// PaymentMethod holds the value of the "payment_method" field.
	PaymentMethod string `json:"payment_method,omitempty"`
	// Processor holds the value of the "processor" field.
	Processor string `json:"processor,omitempty"`
	// ProcessorRef holds the value of the "processor_ref" field.
	ProcessorRef string `json:"processor_ref,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata string `json:"metadata,omitempty"`
	// PaymentHash holds the value of the "payment_hash" field.
	PaymentHash string `json:"payment_hash,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// AddedOn holds the value of the "added_on" field.
	AddedOn time.Time `json:"added_on,omitempty"`
	// UpdatedOn holds the value of the "updated_on" field.
	UpdatedOn time.Time `json:"updated_on,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentAttemptQuery when eager-loading is set.
	Edges        PaymentAttemptEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentAttemptEdges holds the relations/edges for other nodes in the graph.
type PaymentAttemptEdges struct {
	// PaymentIntent holds the value of the payment_intent edge.
	PaymentIntent *PaymentIntent `json:"payment_intent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PaymentIntentOrErr returns the PaymentIntent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentAttemptEdges) PaymentIntentOrErr() (*PaymentIntent, error) {
	if e.loadedTypes[0] {
		if e.PaymentIntent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: paymentintent.Label}
		}
		return e.PaymentIntent, nil
	}
	return nil, &NotLoadedError{edge: "payment_intent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentAttempt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentattempt.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case paymentattempt.FieldID, paymentattempt.FieldPaymentIntentID:
			values[i] = new(sql.NullInt64)
		case paymentattempt.FieldPaymentMethod, paymentattempt.FieldProcessor, paymentattempt.FieldProcessorRef, paymentattempt.FieldMetadata, paymentattempt.FieldPaymentHash, paymentattempt.FieldStatus, paymentattempt.FieldCurrency:
			values[i] = new(sql.NullString)
		case paymentattempt.FieldAddedOn, paymentattempt.FieldUpdatedOn:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentAttempt fields.
func (pa *PaymentAttempt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentattempt.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case paymentattempt.FieldPaymentIntentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_intent_id", values[i])
			} else if value.Valid {
				pa.PaymentIntentID = int(value.Int64)
			}
		case paymentattempt.FieldPaymentMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method", values[i])
			} else if value.Valid {
				pa.PaymentMethod = value.String
			}
		case paymentattempt.FieldProcessor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field processor", values[i])
			} else if value.Valid {
				pa.Processor = value.String
			}
		case paymentattempt.FieldProcessorRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field processor_ref", values[i])
			} else if value.Valid {
				pa.ProcessorRef = value.String
			}
		case paymentattempt.FieldMetadata:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value.Valid {
				pa.Metadata = value.String
			}
		case paymentattempt.FieldPaymentHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_hash", values[i])
			} else if value.Valid {
				pa.PaymentHash = value.String
			}
		case paymentattempt.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pa.Status = value.String
			}
		case paymentattempt.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pa.Amount = value.Float64
			}
		case paymentattempt.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				pa.Currency = value.String
			}
		case paymentattempt.FieldAddedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field added_on", values[i])
			} else if value.Valid {
				pa.AddedOn = value.Time
			}
		case paymentattempt.FieldUpdatedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_on", values[i])
			} else if value.Valid {
				pa.UpdatedOn = value.Time
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentAttempt.
// This includes values selected through modifiers, order, etc.
func (pa *PaymentAttempt) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryPaymentIntent queries the "payment_intent" edge of the PaymentAttempt entity.
func (pa *PaymentAttempt) QueryPaymentIntent() *PaymentIntentQuery {
	return NewPaymentAttemptClient(pa.config).QueryPaymentIntent(pa)
}

// Update returns a builder for updating this PaymentAttempt.
// Note that you need to call PaymentAttempt.Unwrap() before calling this method if this PaymentAttempt
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *PaymentAttempt) Update() *PaymentAttemptUpdateOne {
	return NewPaymentAttemptClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the PaymentAttempt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *PaymentAttempt) Unwrap() *PaymentAttempt {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentAttempt is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *PaymentAttempt) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentAttempt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("payment_intent_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.PaymentIntentID))
	builder.WriteString(", ")
	builder.WriteString("payment_method=")
	builder.WriteString(pa.PaymentMethod)
	builder.WriteString(", ")
	builder.WriteString("processor=")
	builder.WriteString(pa.Processor)
	builder.WriteString(", ")
	builder.WriteString("processor_ref=")
	builder.WriteString(pa.ProcessorRef)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(pa.Metadata)
	builder.WriteString(", ")
	builder.WriteString("payment_hash=")
	builder.WriteString(pa.PaymentHash)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(pa.Status)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(pa.Currency)
	builder.WriteString(", ")
	builder.WriteString("added_on=")
	builder.WriteString(pa.AddedOn.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_on=")
	builder.WriteString(pa.UpdatedOn.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentAttempts is a parsable slice of PaymentAttempt.
type PaymentAttempts []*PaymentAttempt
