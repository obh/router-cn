// Code generated by ent, DO NOT EDIT.

package paymentintent

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the paymentintent type in the database.
	Label = "payment_intent"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCustomerEmail holds the string denoting the customer_email field in the database.
	FieldCustomerEmail = "customer_email"
	// FieldCustomerPhone holds the string denoting the customer_phone field in the database.
	FieldCustomerPhone = "customer_phone"
	// FieldCustomerAddress holds the string denoting the customer_address field in the database.
	FieldCustomerAddress = "customer_address"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldAddedOn holds the string denoting the added_on field in the database.
	FieldAddedOn = "added_on"
	// FieldUpdatedOn holds the string denoting the updated_on field in the database.
	FieldUpdatedOn = "updated_on"
	// EdgePaymentAttempts holds the string denoting the payment_attempts edge name in mutations.
	EdgePaymentAttempts = "payment_attempts"
	// Table holds the table name of the paymentintent in the database.
	Table = "paymentintent"
	// PaymentAttemptsTable is the table that holds the payment_attempts relation/edge.
	PaymentAttemptsTable = "paymentattempt"
	// PaymentAttemptsInverseTable is the table name for the PaymentAttempt entity.
	// It exists in this package in order to avoid circular dependency with the "paymentattempt" package.
	PaymentAttemptsInverseTable = "paymentattempt"
	// PaymentAttemptsColumn is the table column denoting the payment_attempts relation/edge.
	PaymentAttemptsColumn = "payment_intent_id"
)

// Columns holds all SQL columns for paymentintent fields.
var Columns = []string{
	FieldID,
	FieldCustomerEmail,
	FieldCustomerPhone,
	FieldCustomerAddress,
	FieldStatus,
	FieldAmount,
	FieldCurrency,
	FieldAddedOn,
	FieldUpdatedOn,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PaymentIntent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCustomerEmail orders the results by the customer_email field.
func ByCustomerEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerEmail, opts...).ToFunc()
}

// ByCustomerPhone orders the results by the customer_phone field.
func ByCustomerPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerPhone, opts...).ToFunc()
}

// ByCustomerAddress orders the results by the customer_address field.
func ByCustomerAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerAddress, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByAddedOn orders the results by the added_on field.
func ByAddedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddedOn, opts...).ToFunc()
}

// ByUpdatedOn orders the results by the updated_on field.
func ByUpdatedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedOn, opts...).ToFunc()
}

// ByPaymentAttemptsCount orders the results by payment_attempts count.
func ByPaymentAttemptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentAttemptsStep(), opts...)
	}
}

// ByPaymentAttempts orders the results by payment_attempts terms.
func ByPaymentAttempts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentAttemptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPaymentAttemptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentAttemptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PaymentAttemptsTable, PaymentAttemptsColumn),
	)
}
