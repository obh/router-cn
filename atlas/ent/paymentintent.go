// Code generated by ent, DO NOT EDIT.

package ent

import (
	"atlas/ent/paymentintent"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaymentIntent is the model entity for the PaymentIntent schema.
type PaymentIntent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CustomerEmail holds the value of the "customer_email" field.
	CustomerEmail string `json:"customer_email,omitempty"`
	// CustomerPhone holds the value of the "customer_phone" field.
	CustomerPhone string `json:"customer_phone,omitempty"`
	// CustomerAddress holds the value of the "customer_address" field.
	CustomerAddress string `json:"customer_address,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// AddedOn holds the value of the "added_on" field.
	AddedOn time.Time `json:"added_on,omitempty"`
	// UpdatedOn holds the value of the "updated_on" field.
	UpdatedOn time.Time `json:"updated_on,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentIntentQuery when eager-loading is set.
	Edges        PaymentIntentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentIntentEdges holds the relations/edges for other nodes in the graph.
type PaymentIntentEdges struct {
	// PaymentAttempts holds the value of the payment_attempts edge.
	PaymentAttempts []*PaymentAttempt `json:"payment_attempts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PaymentAttemptsOrErr returns the PaymentAttempts value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentIntentEdges) PaymentAttemptsOrErr() ([]*PaymentAttempt, error) {
	if e.loadedTypes[0] {
		return e.PaymentAttempts, nil
	}
	return nil, &NotLoadedError{edge: "payment_attempts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentIntent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentintent.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case paymentintent.FieldID:
			values[i] = new(sql.NullInt64)
		case paymentintent.FieldCustomerEmail, paymentintent.FieldCustomerPhone, paymentintent.FieldCustomerAddress, paymentintent.FieldStatus, paymentintent.FieldCurrency:
			values[i] = new(sql.NullString)
		case paymentintent.FieldAddedOn, paymentintent.FieldUpdatedOn:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentIntent fields.
func (pi *PaymentIntent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentintent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case paymentintent.FieldCustomerEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_email", values[i])
			} else if value.Valid {
				pi.CustomerEmail = value.String
			}
		case paymentintent.FieldCustomerPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_phone", values[i])
			} else if value.Valid {
				pi.CustomerPhone = value.String
			}
		case paymentintent.FieldCustomerAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_address", values[i])
			} else if value.Valid {
				pi.CustomerAddress = value.String
			}
		case paymentintent.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pi.Status = value.String
			}
		case paymentintent.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pi.Amount = value.Float64
			}
		case paymentintent.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				pi.Currency = value.String
			}
		case paymentintent.FieldAddedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field added_on", values[i])
			} else if value.Valid {
				pi.AddedOn = value.Time
			}
		case paymentintent.FieldUpdatedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_on", values[i])
			} else if value.Valid {
				pi.UpdatedOn = value.Time
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentIntent.
// This includes values selected through modifiers, order, etc.
func (pi *PaymentIntent) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryPaymentAttempts queries the "payment_attempts" edge of the PaymentIntent entity.
func (pi *PaymentIntent) QueryPaymentAttempts() *PaymentAttemptQuery {
	return NewPaymentIntentClient(pi.config).QueryPaymentAttempts(pi)
}

// Update returns a builder for updating this PaymentIntent.
// Note that you need to call PaymentIntent.Unwrap() before calling this method if this PaymentIntent
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PaymentIntent) Update() *PaymentIntentUpdateOne {
	return NewPaymentIntentClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PaymentIntent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PaymentIntent) Unwrap() *PaymentIntent {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentIntent is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PaymentIntent) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentIntent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("customer_email=")
	builder.WriteString(pi.CustomerEmail)
	builder.WriteString(", ")
	builder.WriteString("customer_phone=")
	builder.WriteString(pi.CustomerPhone)
	builder.WriteString(", ")
	builder.WriteString("customer_address=")
	builder.WriteString(pi.CustomerAddress)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(pi.Status)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pi.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(pi.Currency)
	builder.WriteString(", ")
	builder.WriteString("added_on=")
	builder.WriteString(pi.AddedOn.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_on=")
	builder.WriteString(pi.UpdatedOn.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentIntents is a parsable slice of PaymentIntent.
type PaymentIntents []*PaymentIntent
