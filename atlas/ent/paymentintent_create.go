// Code generated by ent, DO NOT EDIT.

package ent

import (
	"atlas/ent/paymentattempt"
	"atlas/ent/paymentintent"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentIntentCreate is the builder for creating a PaymentIntent entity.
type PaymentIntentCreate struct {
	config
	mutation *PaymentIntentMutation
	hooks    []Hook
}

// SetCustomerEmail sets the "customer_email" field.
func (pic *PaymentIntentCreate) SetCustomerEmail(s string) *PaymentIntentCreate {
	pic.mutation.SetCustomerEmail(s)
	return pic
}

// SetCustomerPhone sets the "customer_phone" field.
func (pic *PaymentIntentCreate) SetCustomerPhone(s string) *PaymentIntentCreate {
	pic.mutation.SetCustomerPhone(s)
	return pic
}

// SetCustomerAddress sets the "customer_address" field.
func (pic *PaymentIntentCreate) SetCustomerAddress(s string) *PaymentIntentCreate {
	pic.mutation.SetCustomerAddress(s)
	return pic
}

// SetStatus sets the "status" field.
func (pic *PaymentIntentCreate) SetStatus(s string) *PaymentIntentCreate {
	pic.mutation.SetStatus(s)
	return pic
}

// SetAmount sets the "amount" field.
func (pic *PaymentIntentCreate) SetAmount(f float64) *PaymentIntentCreate {
	pic.mutation.SetAmount(f)
	return pic
}

// SetCurrency sets the "currency" field.
func (pic *PaymentIntentCreate) SetCurrency(s string) *PaymentIntentCreate {
	pic.mutation.SetCurrency(s)
	return pic
}

// SetAddedOn sets the "added_on" field.
func (pic *PaymentIntentCreate) SetAddedOn(t time.Time) *PaymentIntentCreate {
	pic.mutation.SetAddedOn(t)
	return pic
}

// SetNillableAddedOn sets the "added_on" field if the given value is not nil.
func (pic *PaymentIntentCreate) SetNillableAddedOn(t *time.Time) *PaymentIntentCreate {
	if t != nil {
		pic.SetAddedOn(*t)
	}
	return pic
}

// SetUpdatedOn sets the "updated_on" field.
func (pic *PaymentIntentCreate) SetUpdatedOn(t time.Time) *PaymentIntentCreate {
	pic.mutation.SetUpdatedOn(t)
	return pic
}

// SetNillableUpdatedOn sets the "updated_on" field if the given value is not nil.
func (pic *PaymentIntentCreate) SetNillableUpdatedOn(t *time.Time) *PaymentIntentCreate {
	if t != nil {
		pic.SetUpdatedOn(*t)
	}
	return pic
}

// SetID sets the "id" field.
func (pic *PaymentIntentCreate) SetID(i int) *PaymentIntentCreate {
	pic.mutation.SetID(i)
	return pic
}

// AddPaymentAttemptIDs adds the "payment_attempts" edge to the PaymentAttempt entity by IDs.
func (pic *PaymentIntentCreate) AddPaymentAttemptIDs(ids ...int) *PaymentIntentCreate {
	pic.mutation.AddPaymentAttemptIDs(ids...)
	return pic
}

// AddPaymentAttempts adds the "payment_attempts" edges to the PaymentAttempt entity.
func (pic *PaymentIntentCreate) AddPaymentAttempts(p ...*PaymentAttempt) *PaymentIntentCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pic.AddPaymentAttemptIDs(ids...)
}

// Mutation returns the PaymentIntentMutation object of the builder.
func (pic *PaymentIntentCreate) Mutation() *PaymentIntentMutation {
	return pic.mutation
}

// Save creates the PaymentIntent in the database.
func (pic *PaymentIntentCreate) Save(ctx context.Context) (*PaymentIntent, error) {
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PaymentIntentCreate) SaveX(ctx context.Context) *PaymentIntent {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *PaymentIntentCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *PaymentIntentCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PaymentIntentCreate) check() error {
	if _, ok := pic.mutation.CustomerEmail(); !ok {
		return &ValidationError{Name: "customer_email", err: errors.New(`ent: missing required field "PaymentIntent.customer_email"`)}
	}
	if _, ok := pic.mutation.CustomerPhone(); !ok {
		return &ValidationError{Name: "customer_phone", err: errors.New(`ent: missing required field "PaymentIntent.customer_phone"`)}
	}
	if _, ok := pic.mutation.CustomerAddress(); !ok {
		return &ValidationError{Name: "customer_address", err: errors.New(`ent: missing required field "PaymentIntent.customer_address"`)}
	}
	if _, ok := pic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PaymentIntent.status"`)}
	}
	if _, ok := pic.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "PaymentIntent.amount"`)}
	}
	if _, ok := pic.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "PaymentIntent.currency"`)}
	}
	return nil
}

func (pic *PaymentIntentCreate) sqlSave(ctx context.Context) (*PaymentIntent, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *PaymentIntentCreate) createSpec() (*PaymentIntent, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentIntent{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(paymentintent.Table, sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt))
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.CustomerEmail(); ok {
		_spec.SetField(paymentintent.FieldCustomerEmail, field.TypeString, value)
		_node.CustomerEmail = value
	}
	if value, ok := pic.mutation.CustomerPhone(); ok {
		_spec.SetField(paymentintent.FieldCustomerPhone, field.TypeString, value)
		_node.CustomerPhone = value
	}
	if value, ok := pic.mutation.CustomerAddress(); ok {
		_spec.SetField(paymentintent.FieldCustomerAddress, field.TypeString, value)
		_node.CustomerAddress = value
	}
	if value, ok := pic.mutation.Status(); ok {
		_spec.SetField(paymentintent.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pic.mutation.Amount(); ok {
		_spec.SetField(paymentintent.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := pic.mutation.Currency(); ok {
		_spec.SetField(paymentintent.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := pic.mutation.AddedOn(); ok {
		_spec.SetField(paymentintent.FieldAddedOn, field.TypeTime, value)
		_node.AddedOn = value
	}
	if value, ok := pic.mutation.UpdatedOn(); ok {
		_spec.SetField(paymentintent.FieldUpdatedOn, field.TypeTime, value)
		_node.UpdatedOn = value
	}
	if nodes := pic.mutation.PaymentAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentintent.PaymentAttemptsTable,
			Columns: []string{paymentintent.PaymentAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentIntentCreateBulk is the builder for creating many PaymentIntent entities in bulk.
type PaymentIntentCreateBulk struct {
	config
	builders []*PaymentIntentCreate
}

// Save creates the PaymentIntent entities in the database.
func (picb *PaymentIntentCreateBulk) Save(ctx context.Context) ([]*PaymentIntent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PaymentIntent, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentIntentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *PaymentIntentCreateBulk) SaveX(ctx context.Context) []*PaymentIntent {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *PaymentIntentCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *PaymentIntentCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
