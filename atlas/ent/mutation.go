// Code generated by ent, DO NOT EDIT.

package ent

import (
	"atlas/ent/paymentattempt"
	"atlas/ent/paymentintent"
	"atlas/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePaymentAttempt = "PaymentAttempt"
	TypePaymentIntent  = "PaymentIntent"
)

// PaymentAttemptMutation represents an operation that mutates the PaymentAttempt nodes in the graph.
type PaymentAttemptMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	payment_method        *string
	processor             *string
	processor_ref         *string
	metadata              *string
	payment_hash          *string
	status                *string
	amount                *float64
	addamount             *float64
	currency              *string
	added_on              *time.Time
	updated_on            *time.Time
	clearedFields         map[string]struct{}
	payment_intent        *int
	clearedpayment_intent bool
	done                  bool
	oldValue              func(context.Context) (*PaymentAttempt, error)
	predicates            []predicate.PaymentAttempt
}

var _ ent.Mutation = (*PaymentAttemptMutation)(nil)

// paymentattemptOption allows management of the mutation configuration using functional options.
type paymentattemptOption func(*PaymentAttemptMutation)

// newPaymentAttemptMutation creates new mutation for the PaymentAttempt entity.
func newPaymentAttemptMutation(c config, op Op, opts ...paymentattemptOption) *PaymentAttemptMutation {
	m := &PaymentAttemptMutation{
		config:        c,
		op:            op,
		typ:           TypePaymentAttempt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentAttemptID sets the ID field of the mutation.
func withPaymentAttemptID(id int) paymentattemptOption {
	return func(m *PaymentAttemptMutation) {
		var (
			err   error
			once  sync.Once
			value *PaymentAttempt
		)
		m.oldValue = func(ctx context.Context) (*PaymentAttempt, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PaymentAttempt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPaymentAttempt sets the old PaymentAttempt of the mutation.
func withPaymentAttempt(node *PaymentAttempt) paymentattemptOption {
	return func(m *PaymentAttemptMutation) {
		m.oldValue = func(context.Context) (*PaymentAttempt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentAttemptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentAttemptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PaymentAttempt entities.
func (m *PaymentAttemptMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentAttemptMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentAttemptMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PaymentAttempt.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPaymentIntentID sets the "payment_intent_id" field.
func (m *PaymentAttemptMutation) SetPaymentIntentID(i int) {
	m.payment_intent = &i
}

// PaymentIntentID returns the value of the "payment_intent_id" field in the mutation.
func (m *PaymentAttemptMutation) PaymentIntentID() (r int, exists bool) {
	v := m.payment_intent
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentIntentID returns the old "payment_intent_id" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldPaymentIntentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentIntentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentIntentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentIntentID: %w", err)
	}
	return oldValue.PaymentIntentID, nil
}

// ResetPaymentIntentID resets all changes to the "payment_intent_id" field.
func (m *PaymentAttemptMutation) ResetPaymentIntentID() {
	m.payment_intent = nil
}

// SetPaymentMethod sets the "payment_method" field.
func (m *PaymentAttemptMutation) SetPaymentMethod(s string) {
	m.payment_method = &s
}

// PaymentMethod returns the value of the "payment_method" field in the mutation.
func (m *PaymentAttemptMutation) PaymentMethod() (r string, exists bool) {
	v := m.payment_method
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentMethod returns the old "payment_method" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldPaymentMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentMethod: %w", err)
	}
	return oldValue.PaymentMethod, nil
}

// ResetPaymentMethod resets all changes to the "payment_method" field.
func (m *PaymentAttemptMutation) ResetPaymentMethod() {
	m.payment_method = nil
}

// SetProcessor sets the "processor" field.
func (m *PaymentAttemptMutation) SetProcessor(s string) {
	m.processor = &s
}

// Processor returns the value of the "processor" field in the mutation.
func (m *PaymentAttemptMutation) Processor() (r string, exists bool) {
	v := m.processor
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessor returns the old "processor" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldProcessor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessor: %w", err)
	}
	return oldValue.Processor, nil
}

// ClearProcessor clears the value of the "processor" field.
func (m *PaymentAttemptMutation) ClearProcessor() {
	m.processor = nil
	m.clearedFields[paymentattempt.FieldProcessor] = struct{}{}
}

// ProcessorCleared returns if the "processor" field was cleared in this mutation.
func (m *PaymentAttemptMutation) ProcessorCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldProcessor]
	return ok
}

// ResetProcessor resets all changes to the "processor" field.
func (m *PaymentAttemptMutation) ResetProcessor() {
	m.processor = nil
	delete(m.clearedFields, paymentattempt.FieldProcessor)
}

// SetProcessorRef sets the "processor_ref" field.
func (m *PaymentAttemptMutation) SetProcessorRef(s string) {
	m.processor_ref = &s
}

// ProcessorRef returns the value of the "processor_ref" field in the mutation.
func (m *PaymentAttemptMutation) ProcessorRef() (r string, exists bool) {
	v := m.processor_ref
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessorRef returns the old "processor_ref" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldProcessorRef(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessorRef is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessorRef requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessorRef: %w", err)
	}
	return oldValue.ProcessorRef, nil
}

// ClearProcessorRef clears the value of the "processor_ref" field.
func (m *PaymentAttemptMutation) ClearProcessorRef() {
	m.processor_ref = nil
	m.clearedFields[paymentattempt.FieldProcessorRef] = struct{}{}
}

// ProcessorRefCleared returns if the "processor_ref" field was cleared in this mutation.
func (m *PaymentAttemptMutation) ProcessorRefCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldProcessorRef]
	return ok
}

// ResetProcessorRef resets all changes to the "processor_ref" field.
func (m *PaymentAttemptMutation) ResetProcessorRef() {
	m.processor_ref = nil
	delete(m.clearedFields, paymentattempt.FieldProcessorRef)
}

// SetMetadata sets the "metadata" field.
func (m *PaymentAttemptMutation) SetMetadata(s string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *PaymentAttemptMutation) Metadata() (r string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldMetadata(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *PaymentAttemptMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[paymentattempt.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *PaymentAttemptMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *PaymentAttemptMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, paymentattempt.FieldMetadata)
}

// SetPaymentHash sets the "payment_hash" field.
func (m *PaymentAttemptMutation) SetPaymentHash(s string) {
	m.payment_hash = &s
}

// PaymentHash returns the value of the "payment_hash" field in the mutation.
func (m *PaymentAttemptMutation) PaymentHash() (r string, exists bool) {
	v := m.payment_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentHash returns the old "payment_hash" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldPaymentHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentHash: %w", err)
	}
	return oldValue.PaymentHash, nil
}

// ClearPaymentHash clears the value of the "payment_hash" field.
func (m *PaymentAttemptMutation) ClearPaymentHash() {
	m.payment_hash = nil
	m.clearedFields[paymentattempt.FieldPaymentHash] = struct{}{}
}

// PaymentHashCleared returns if the "payment_hash" field was cleared in this mutation.
func (m *PaymentAttemptMutation) PaymentHashCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldPaymentHash]
	return ok
}

// ResetPaymentHash resets all changes to the "payment_hash" field.
func (m *PaymentAttemptMutation) ResetPaymentHash() {
	m.payment_hash = nil
	delete(m.clearedFields, paymentattempt.FieldPaymentHash)
}

// SetStatus sets the "status" field.
func (m *PaymentAttemptMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *PaymentAttemptMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PaymentAttemptMutation) ResetStatus() {
	m.status = nil
}

// SetAmount sets the "amount" field.
func (m *PaymentAttemptMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PaymentAttemptMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *PaymentAttemptMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *PaymentAttemptMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *PaymentAttemptMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetCurrency sets the "currency" field.
func (m *PaymentAttemptMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *PaymentAttemptMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *PaymentAttemptMutation) ResetCurrency() {
	m.currency = nil
}

// SetAddedOn sets the "added_on" field.
func (m *PaymentAttemptMutation) SetAddedOn(t time.Time) {
	m.added_on = &t
}

// AddedOn returns the value of the "added_on" field in the mutation.
func (m *PaymentAttemptMutation) AddedOn() (r time.Time, exists bool) {
	v := m.added_on
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedOn returns the old "added_on" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldAddedOn(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddedOn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddedOn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedOn: %w", err)
	}
	return oldValue.AddedOn, nil
}

// ClearAddedOn clears the value of the "added_on" field.
func (m *PaymentAttemptMutation) ClearAddedOn() {
	m.added_on = nil
	m.clearedFields[paymentattempt.FieldAddedOn] = struct{}{}
}

// AddedOnCleared returns if the "added_on" field was cleared in this mutation.
func (m *PaymentAttemptMutation) AddedOnCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldAddedOn]
	return ok
}

// ResetAddedOn resets all changes to the "added_on" field.
func (m *PaymentAttemptMutation) ResetAddedOn() {
	m.added_on = nil
	delete(m.clearedFields, paymentattempt.FieldAddedOn)
}

// SetUpdatedOn sets the "updated_on" field.
func (m *PaymentAttemptMutation) SetUpdatedOn(t time.Time) {
	m.updated_on = &t
}

// UpdatedOn returns the value of the "updated_on" field in the mutation.
func (m *PaymentAttemptMutation) UpdatedOn() (r time.Time, exists bool) {
	v := m.updated_on
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedOn returns the old "updated_on" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldUpdatedOn(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedOn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedOn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedOn: %w", err)
	}
	return oldValue.UpdatedOn, nil
}

// ClearUpdatedOn clears the value of the "updated_on" field.
func (m *PaymentAttemptMutation) ClearUpdatedOn() {
	m.updated_on = nil
	m.clearedFields[paymentattempt.FieldUpdatedOn] = struct{}{}
}

// UpdatedOnCleared returns if the "updated_on" field was cleared in this mutation.
func (m *PaymentAttemptMutation) UpdatedOnCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldUpdatedOn]
	return ok
}

// ResetUpdatedOn resets all changes to the "updated_on" field.
func (m *PaymentAttemptMutation) ResetUpdatedOn() {
	m.updated_on = nil
	delete(m.clearedFields, paymentattempt.FieldUpdatedOn)
}

// ClearPaymentIntent clears the "payment_intent" edge to the PaymentIntent entity.
func (m *PaymentAttemptMutation) ClearPaymentIntent() {
	m.clearedpayment_intent = true
}

// PaymentIntentCleared reports if the "payment_intent" edge to the PaymentIntent entity was cleared.
func (m *PaymentAttemptMutation) PaymentIntentCleared() bool {
	return m.clearedpayment_intent
}

// PaymentIntentIDs returns the "payment_intent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PaymentIntentID instead. It exists only for internal usage by the builders.
func (m *PaymentAttemptMutation) PaymentIntentIDs() (ids []int) {
	if id := m.payment_intent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPaymentIntent resets all changes to the "payment_intent" edge.
func (m *PaymentAttemptMutation) ResetPaymentIntent() {
	m.payment_intent = nil
	m.clearedpayment_intent = false
}

// Where appends a list predicates to the PaymentAttemptMutation builder.
func (m *PaymentAttemptMutation) Where(ps ...predicate.PaymentAttempt) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentAttemptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentAttemptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PaymentAttempt, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentAttemptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentAttemptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PaymentAttempt).
func (m *PaymentAttemptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentAttemptMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.payment_intent != nil {
		fields = append(fields, paymentattempt.FieldPaymentIntentID)
	}
	if m.payment_method != nil {
		fields = append(fields, paymentattempt.FieldPaymentMethod)
	}
	if m.processor != nil {
		fields = append(fields, paymentattempt.FieldProcessor)
	}
	if m.processor_ref != nil {
		fields = append(fields, paymentattempt.FieldProcessorRef)
	}
	if m.metadata != nil {
		fields = append(fields, paymentattempt.FieldMetadata)
	}
	if m.payment_hash != nil {
		fields = append(fields, paymentattempt.FieldPaymentHash)
	}
	if m.status != nil {
		fields = append(fields, paymentattempt.FieldStatus)
	}
	if m.amount != nil {
		fields = append(fields, paymentattempt.FieldAmount)
	}
	if m.currency != nil {
		fields = append(fields, paymentattempt.FieldCurrency)
	}
	if m.added_on != nil {
		fields = append(fields, paymentattempt.FieldAddedOn)
	}
	if m.updated_on != nil {
		fields = append(fields, paymentattempt.FieldUpdatedOn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentAttemptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case paymentattempt.FieldPaymentIntentID:
		return m.PaymentIntentID()
	case paymentattempt.FieldPaymentMethod:
		return m.PaymentMethod()
	case paymentattempt.FieldProcessor:
		return m.Processor()
	case paymentattempt.FieldProcessorRef:
		return m.ProcessorRef()
	case paymentattempt.FieldMetadata:
		return m.Metadata()
	case paymentattempt.FieldPaymentHash:
		return m.PaymentHash()
	case paymentattempt.FieldStatus:
		return m.Status()
	case paymentattempt.FieldAmount:
		return m.Amount()
	case paymentattempt.FieldCurrency:
		return m.Currency()
	case paymentattempt.FieldAddedOn:
		return m.AddedOn()
	case paymentattempt.FieldUpdatedOn:
		return m.UpdatedOn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentAttemptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case paymentattempt.FieldPaymentIntentID:
		return m.OldPaymentIntentID(ctx)
	case paymentattempt.FieldPaymentMethod:
		return m.OldPaymentMethod(ctx)
	case paymentattempt.FieldProcessor:
		return m.OldProcessor(ctx)
	case paymentattempt.FieldProcessorRef:
		return m.OldProcessorRef(ctx)
	case paymentattempt.FieldMetadata:
		return m.OldMetadata(ctx)
	case paymentattempt.FieldPaymentHash:
		return m.OldPaymentHash(ctx)
	case paymentattempt.FieldStatus:
		return m.OldStatus(ctx)
	case paymentattempt.FieldAmount:
		return m.OldAmount(ctx)
	case paymentattempt.FieldCurrency:
		return m.OldCurrency(ctx)
	case paymentattempt.FieldAddedOn:
		return m.OldAddedOn(ctx)
	case paymentattempt.FieldUpdatedOn:
		return m.OldUpdatedOn(ctx)
	}
	return nil, fmt.Errorf("unknown PaymentAttempt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentAttemptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case paymentattempt.FieldPaymentIntentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentIntentID(v)
		return nil
	case paymentattempt.FieldPaymentMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentMethod(v)
		return nil
	case paymentattempt.FieldProcessor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessor(v)
		return nil
	case paymentattempt.FieldProcessorRef:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessorRef(v)
		return nil
	case paymentattempt.FieldMetadata:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case paymentattempt.FieldPaymentHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentHash(v)
		return nil
	case paymentattempt.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case paymentattempt.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case paymentattempt.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case paymentattempt.FieldAddedOn:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedOn(v)
		return nil
	case paymentattempt.FieldUpdatedOn:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedOn(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentAttemptMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, paymentattempt.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentAttemptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case paymentattempt.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentAttemptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case paymentattempt.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentAttemptMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(paymentattempt.FieldProcessor) {
		fields = append(fields, paymentattempt.FieldProcessor)
	}
	if m.FieldCleared(paymentattempt.FieldProcessorRef) {
		fields = append(fields, paymentattempt.FieldProcessorRef)
	}
	if m.FieldCleared(paymentattempt.FieldMetadata) {
		fields = append(fields, paymentattempt.FieldMetadata)
	}
	if m.FieldCleared(paymentattempt.FieldPaymentHash) {
		fields = append(fields, paymentattempt.FieldPaymentHash)
	}
	if m.FieldCleared(paymentattempt.FieldAddedOn) {
		fields = append(fields, paymentattempt.FieldAddedOn)
	}
	if m.FieldCleared(paymentattempt.FieldUpdatedOn) {
		fields = append(fields, paymentattempt.FieldUpdatedOn)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentAttemptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentAttemptMutation) ClearField(name string) error {
	switch name {
	case paymentattempt.FieldProcessor:
		m.ClearProcessor()
		return nil
	case paymentattempt.FieldProcessorRef:
		m.ClearProcessorRef()
		return nil
	case paymentattempt.FieldMetadata:
		m.ClearMetadata()
		return nil
	case paymentattempt.FieldPaymentHash:
		m.ClearPaymentHash()
		return nil
	case paymentattempt.FieldAddedOn:
		m.ClearAddedOn()
		return nil
	case paymentattempt.FieldUpdatedOn:
		m.ClearUpdatedOn()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentAttemptMutation) ResetField(name string) error {
	switch name {
	case paymentattempt.FieldPaymentIntentID:
		m.ResetPaymentIntentID()
		return nil
	case paymentattempt.FieldPaymentMethod:
		m.ResetPaymentMethod()
		return nil
	case paymentattempt.FieldProcessor:
		m.ResetProcessor()
		return nil
	case paymentattempt.FieldProcessorRef:
		m.ResetProcessorRef()
		return nil
	case paymentattempt.FieldMetadata:
		m.ResetMetadata()
		return nil
	case paymentattempt.FieldPaymentHash:
		m.ResetPaymentHash()
		return nil
	case paymentattempt.FieldStatus:
		m.ResetStatus()
		return nil
	case paymentattempt.FieldAmount:
		m.ResetAmount()
		return nil
	case paymentattempt.FieldCurrency:
		m.ResetCurrency()
		return nil
	case paymentattempt.FieldAddedOn:
		m.ResetAddedOn()
		return nil
	case paymentattempt.FieldUpdatedOn:
		m.ResetUpdatedOn()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentAttemptMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payment_intent != nil {
		edges = append(edges, paymentattempt.EdgePaymentIntent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentAttemptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case paymentattempt.EdgePaymentIntent:
		if id := m.payment_intent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentAttemptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentAttemptMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentAttemptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayment_intent {
		edges = append(edges, paymentattempt.EdgePaymentIntent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentAttemptMutation) EdgeCleared(name string) bool {
	switch name {
	case paymentattempt.EdgePaymentIntent:
		return m.clearedpayment_intent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentAttemptMutation) ClearEdge(name string) error {
	switch name {
	case paymentattempt.EdgePaymentIntent:
		m.ClearPaymentIntent()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentAttemptMutation) ResetEdge(name string) error {
	switch name {
	case paymentattempt.EdgePaymentIntent:
		m.ResetPaymentIntent()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt edge %s", name)
}

// PaymentIntentMutation represents an operation that mutates the PaymentIntent nodes in the graph.
type PaymentIntentMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	customer_email          *string
	customer_phone          *string
	customer_address        *string
	status                  *string
	amount                  *float64
	addamount               *float64
	currency                *string
	added_on                *time.Time
	updated_on              *time.Time
	clearedFields           map[string]struct{}
	payment_attempts        map[int]struct{}
	removedpayment_attempts map[int]struct{}
	clearedpayment_attempts bool
	done                    bool
	oldValue                func(context.Context) (*PaymentIntent, error)
	predicates              []predicate.PaymentIntent
}

var _ ent.Mutation = (*PaymentIntentMutation)(nil)

// paymentintentOption allows management of the mutation configuration using functional options.
type paymentintentOption func(*PaymentIntentMutation)

// newPaymentIntentMutation creates new mutation for the PaymentIntent entity.
func newPaymentIntentMutation(c config, op Op, opts ...paymentintentOption) *PaymentIntentMutation {
	m := &PaymentIntentMutation{
		config:        c,
		op:            op,
		typ:           TypePaymentIntent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentIntentID sets the ID field of the mutation.
func withPaymentIntentID(id int) paymentintentOption {
	return func(m *PaymentIntentMutation) {
		var (
			err   error
			once  sync.Once
			value *PaymentIntent
		)
		m.oldValue = func(ctx context.Context) (*PaymentIntent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PaymentIntent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPaymentIntent sets the old PaymentIntent of the mutation.
func withPaymentIntent(node *PaymentIntent) paymentintentOption {
	return func(m *PaymentIntentMutation) {
		m.oldValue = func(context.Context) (*PaymentIntent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentIntentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentIntentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PaymentIntent entities.
func (m *PaymentIntentMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentIntentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentIntentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PaymentIntent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCustomerEmail sets the "customer_email" field.
func (m *PaymentIntentMutation) SetCustomerEmail(s string) {
	m.customer_email = &s
}

// CustomerEmail returns the value of the "customer_email" field in the mutation.
func (m *PaymentIntentMutation) CustomerEmail() (r string, exists bool) {
	v := m.customer_email
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerEmail returns the old "customer_email" field's value of the PaymentIntent entity.
// If the PaymentIntent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentIntentMutation) OldCustomerEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerEmail: %w", err)
	}
	return oldValue.CustomerEmail, nil
}

// ResetCustomerEmail resets all changes to the "customer_email" field.
func (m *PaymentIntentMutation) ResetCustomerEmail() {
	m.customer_email = nil
}

// SetCustomerPhone sets the "customer_phone" field.
func (m *PaymentIntentMutation) SetCustomerPhone(s string) {
	m.customer_phone = &s
}

// CustomerPhone returns the value of the "customer_phone" field in the mutation.
func (m *PaymentIntentMutation) CustomerPhone() (r string, exists bool) {
	v := m.customer_phone
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerPhone returns the old "customer_phone" field's value of the PaymentIntent entity.
// If the PaymentIntent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentIntentMutation) OldCustomerPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerPhone: %w", err)
	}
	return oldValue.CustomerPhone, nil
}

// ResetCustomerPhone resets all changes to the "customer_phone" field.
func (m *PaymentIntentMutation) ResetCustomerPhone() {
	m.customer_phone = nil
}

// SetCustomerAddress sets the "customer_address" field.
func (m *PaymentIntentMutation) SetCustomerAddress(s string) {
	m.customer_address = &s
}

// CustomerAddress returns the value of the "customer_address" field in the mutation.
func (m *PaymentIntentMutation) CustomerAddress() (r string, exists bool) {
	v := m.customer_address
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerAddress returns the old "customer_address" field's value of the PaymentIntent entity.
// If the PaymentIntent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentIntentMutation) OldCustomerAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerAddress: %w", err)
	}
	return oldValue.CustomerAddress, nil
}

// ResetCustomerAddress resets all changes to the "customer_address" field.
func (m *PaymentIntentMutation) ResetCustomerAddress() {
	m.customer_address = nil
}

// SetStatus sets the "status" field.
func (m *PaymentIntentMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *PaymentIntentMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the PaymentIntent entity.
// If the PaymentIntent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentIntentMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PaymentIntentMutation) ResetStatus() {
	m.status = nil
}

// SetAmount sets the "amount" field.
func (m *PaymentIntentMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PaymentIntentMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the PaymentIntent entity.
// If the PaymentIntent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentIntentMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *PaymentIntentMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *PaymentIntentMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *PaymentIntentMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetCurrency sets the "currency" field.
func (m *PaymentIntentMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *PaymentIntentMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the PaymentIntent entity.
// If the PaymentIntent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentIntentMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *PaymentIntentMutation) ResetCurrency() {
	m.currency = nil
}

// SetAddedOn sets the "added_on" field.
func (m *PaymentIntentMutation) SetAddedOn(t time.Time) {
	m.added_on = &t
}

// AddedOn returns the value of the "added_on" field in the mutation.
func (m *PaymentIntentMutation) AddedOn() (r time.Time, exists bool) {
	v := m.added_on
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedOn returns the old "added_on" field's value of the PaymentIntent entity.
// If the PaymentIntent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentIntentMutation) OldAddedOn(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddedOn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddedOn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedOn: %w", err)
	}
	return oldValue.AddedOn, nil
}

// ClearAddedOn clears the value of the "added_on" field.
func (m *PaymentIntentMutation) ClearAddedOn() {
	m.added_on = nil
	m.clearedFields[paymentintent.FieldAddedOn] = struct{}{}
}

// AddedOnCleared returns if the "added_on" field was cleared in this mutation.
func (m *PaymentIntentMutation) AddedOnCleared() bool {
	_, ok := m.clearedFields[paymentintent.FieldAddedOn]
	return ok
}

// ResetAddedOn resets all changes to the "added_on" field.
func (m *PaymentIntentMutation) ResetAddedOn() {
	m.added_on = nil
	delete(m.clearedFields, paymentintent.FieldAddedOn)
}

// SetUpdatedOn sets the "updated_on" field.
func (m *PaymentIntentMutation) SetUpdatedOn(t time.Time) {
	m.updated_on = &t
}

// UpdatedOn returns the value of the "updated_on" field in the mutation.
func (m *PaymentIntentMutation) UpdatedOn() (r time.Time, exists bool) {
	v := m.updated_on
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedOn returns the old "updated_on" field's value of the PaymentIntent entity.
// If the PaymentIntent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentIntentMutation) OldUpdatedOn(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedOn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedOn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedOn: %w", err)
	}
	return oldValue.UpdatedOn, nil
}

// ClearUpdatedOn clears the value of the "updated_on" field.
func (m *PaymentIntentMutation) ClearUpdatedOn() {
	m.updated_on = nil
	m.clearedFields[paymentintent.FieldUpdatedOn] = struct{}{}
}

// UpdatedOnCleared returns if the "updated_on" field was cleared in this mutation.
func (m *PaymentIntentMutation) UpdatedOnCleared() bool {
	_, ok := m.clearedFields[paymentintent.FieldUpdatedOn]
	return ok
}

// ResetUpdatedOn resets all changes to the "updated_on" field.
func (m *PaymentIntentMutation) ResetUpdatedOn() {
	m.updated_on = nil
	delete(m.clearedFields, paymentintent.FieldUpdatedOn)
}

// AddPaymentAttemptIDs adds the "payment_attempts" edge to the PaymentAttempt entity by ids.
func (m *PaymentIntentMutation) AddPaymentAttemptIDs(ids ...int) {
	if m.payment_attempts == nil {
		m.payment_attempts = make(map[int]struct{})
	}
	for i := range ids {
		m.payment_attempts[ids[i]] = struct{}{}
	}
}

// ClearPaymentAttempts clears the "payment_attempts" edge to the PaymentAttempt entity.
func (m *PaymentIntentMutation) ClearPaymentAttempts() {
	m.clearedpayment_attempts = true
}

// PaymentAttemptsCleared reports if the "payment_attempts" edge to the PaymentAttempt entity was cleared.
func (m *PaymentIntentMutation) PaymentAttemptsCleared() bool {
	return m.clearedpayment_attempts
}

// RemovePaymentAttemptIDs removes the "payment_attempts" edge to the PaymentAttempt entity by IDs.
func (m *PaymentIntentMutation) RemovePaymentAttemptIDs(ids ...int) {
	if m.removedpayment_attempts == nil {
		m.removedpayment_attempts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.payment_attempts, ids[i])
		m.removedpayment_attempts[ids[i]] = struct{}{}
	}
}

// RemovedPaymentAttempts returns the removed IDs of the "payment_attempts" edge to the PaymentAttempt entity.
func (m *PaymentIntentMutation) RemovedPaymentAttemptsIDs() (ids []int) {
	for id := range m.removedpayment_attempts {
		ids = append(ids, id)
	}
	return
}

// PaymentAttemptsIDs returns the "payment_attempts" edge IDs in the mutation.
func (m *PaymentIntentMutation) PaymentAttemptsIDs() (ids []int) {
	for id := range m.payment_attempts {
		ids = append(ids, id)
	}
	return
}

// ResetPaymentAttempts resets all changes to the "payment_attempts" edge.
func (m *PaymentIntentMutation) ResetPaymentAttempts() {
	m.payment_attempts = nil
	m.clearedpayment_attempts = false
	m.removedpayment_attempts = nil
}

// Where appends a list predicates to the PaymentIntentMutation builder.
func (m *PaymentIntentMutation) Where(ps ...predicate.PaymentIntent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentIntentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentIntentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PaymentIntent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentIntentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentIntentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PaymentIntent).
func (m *PaymentIntentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentIntentMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.customer_email != nil {
		fields = append(fields, paymentintent.FieldCustomerEmail)
	}
	if m.customer_phone != nil {
		fields = append(fields, paymentintent.FieldCustomerPhone)
	}
	if m.customer_address != nil {
		fields = append(fields, paymentintent.FieldCustomerAddress)
	}
	if m.status != nil {
		fields = append(fields, paymentintent.FieldStatus)
	}
	if m.amount != nil {
		fields = append(fields, paymentintent.FieldAmount)
	}
	if m.currency != nil {
		fields = append(fields, paymentintent.FieldCurrency)
	}
	if m.added_on != nil {
		fields = append(fields, paymentintent.FieldAddedOn)
	}
	if m.updated_on != nil {
		fields = append(fields, paymentintent.FieldUpdatedOn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentIntentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case paymentintent.FieldCustomerEmail:
		return m.CustomerEmail()
	case paymentintent.FieldCustomerPhone:
		return m.CustomerPhone()
	case paymentintent.FieldCustomerAddress:
		return m.CustomerAddress()
	case paymentintent.FieldStatus:
		return m.Status()
	case paymentintent.FieldAmount:
		return m.Amount()
	case paymentintent.FieldCurrency:
		return m.Currency()
	case paymentintent.FieldAddedOn:
		return m.AddedOn()
	case paymentintent.FieldUpdatedOn:
		return m.UpdatedOn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentIntentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case paymentintent.FieldCustomerEmail:
		return m.OldCustomerEmail(ctx)
	case paymentintent.FieldCustomerPhone:
		return m.OldCustomerPhone(ctx)
	case paymentintent.FieldCustomerAddress:
		return m.OldCustomerAddress(ctx)
	case paymentintent.FieldStatus:
		return m.OldStatus(ctx)
	case paymentintent.FieldAmount:
		return m.OldAmount(ctx)
	case paymentintent.FieldCurrency:
		return m.OldCurrency(ctx)
	case paymentintent.FieldAddedOn:
		return m.OldAddedOn(ctx)
	case paymentintent.FieldUpdatedOn:
		return m.OldUpdatedOn(ctx)
	}
	return nil, fmt.Errorf("unknown PaymentIntent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentIntentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case paymentintent.FieldCustomerEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerEmail(v)
		return nil
	case paymentintent.FieldCustomerPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerPhone(v)
		return nil
	case paymentintent.FieldCustomerAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerAddress(v)
		return nil
	case paymentintent.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case paymentintent.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case paymentintent.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case paymentintent.FieldAddedOn:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedOn(v)
		return nil
	case paymentintent.FieldUpdatedOn:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedOn(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentIntent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentIntentMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, paymentintent.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentIntentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case paymentintent.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentIntentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case paymentintent.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentIntent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentIntentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(paymentintent.FieldAddedOn) {
		fields = append(fields, paymentintent.FieldAddedOn)
	}
	if m.FieldCleared(paymentintent.FieldUpdatedOn) {
		fields = append(fields, paymentintent.FieldUpdatedOn)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentIntentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentIntentMutation) ClearField(name string) error {
	switch name {
	case paymentintent.FieldAddedOn:
		m.ClearAddedOn()
		return nil
	case paymentintent.FieldUpdatedOn:
		m.ClearUpdatedOn()
		return nil
	}
	return fmt.Errorf("unknown PaymentIntent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentIntentMutation) ResetField(name string) error {
	switch name {
	case paymentintent.FieldCustomerEmail:
		m.ResetCustomerEmail()
		return nil
	case paymentintent.FieldCustomerPhone:
		m.ResetCustomerPhone()
		return nil
	case paymentintent.FieldCustomerAddress:
		m.ResetCustomerAddress()
		return nil
	case paymentintent.FieldStatus:
		m.ResetStatus()
		return nil
	case paymentintent.FieldAmount:
		m.ResetAmount()
		return nil
	case paymentintent.FieldCurrency:
		m.ResetCurrency()
		return nil
	case paymentintent.FieldAddedOn:
		m.ResetAddedOn()
		return nil
	case paymentintent.FieldUpdatedOn:
		m.ResetUpdatedOn()
		return nil
	}
	return fmt.Errorf("unknown PaymentIntent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentIntentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payment_attempts != nil {
		edges = append(edges, paymentintent.EdgePaymentAttempts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentIntentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case paymentintent.EdgePaymentAttempts:
		ids := make([]ent.Value, 0, len(m.payment_attempts))
		for id := range m.payment_attempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentIntentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpayment_attempts != nil {
		edges = append(edges, paymentintent.EdgePaymentAttempts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentIntentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case paymentintent.EdgePaymentAttempts:
		ids := make([]ent.Value, 0, len(m.removedpayment_attempts))
		for id := range m.removedpayment_attempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentIntentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayment_attempts {
		edges = append(edges, paymentintent.EdgePaymentAttempts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentIntentMutation) EdgeCleared(name string) bool {
	switch name {
	case paymentintent.EdgePaymentAttempts:
		return m.clearedpayment_attempts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentIntentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown PaymentIntent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentIntentMutation) ResetEdge(name string) error {
	switch name {
	case paymentintent.EdgePaymentAttempts:
		m.ResetPaymentAttempts()
		return nil
	}
	return fmt.Errorf("unknown PaymentIntent edge %s", name)
}
