// Code generated by ent, DO NOT EDIT.

package paymentattempt

import (
	"atlas/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldID, id))
}

// PaymentIntentID applies equality check predicate on the "payment_intent_id" field. It's identical to PaymentIntentIDEQ.
func PaymentIntentID(v int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldPaymentIntentID, v))
}

// PaymentMethod applies equality check predicate on the "payment_method" field. It's identical to PaymentMethodEQ.
func PaymentMethod(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldPaymentMethod, v))
}

// Processor applies equality check predicate on the "processor" field. It's identical to ProcessorEQ.
func Processor(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldProcessor, v))
}

// ProcessorRef applies equality check predicate on the "processor_ref" field. It's identical to ProcessorRefEQ.
func ProcessorRef(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldProcessorRef, v))
}

// Metadata applies equality check predicate on the "metadata" field. It's identical to MetadataEQ.
func Metadata(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldMetadata, v))
}

// PaymentHash applies equality check predicate on the "payment_hash" field. It's identical to PaymentHashEQ.
func PaymentHash(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldPaymentHash, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldStatus, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldCurrency, v))
}

// AddedOn applies equality check predicate on the "added_on" field. It's identical to AddedOnEQ.
func AddedOn(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldAddedOn, v))
}

// UpdatedOn applies equality check predicate on the "updated_on" field. It's identical to UpdatedOnEQ.
func UpdatedOn(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldUpdatedOn, v))
}

// PaymentIntentIDEQ applies the EQ predicate on the "payment_intent_id" field.
func PaymentIntentIDEQ(v int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldPaymentIntentID, v))
}

// PaymentIntentIDNEQ applies the NEQ predicate on the "payment_intent_id" field.
func PaymentIntentIDNEQ(v int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldPaymentIntentID, v))
}

// PaymentIntentIDIn applies the In predicate on the "payment_intent_id" field.
func PaymentIntentIDIn(vs ...int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldPaymentIntentID, vs...))
}

// PaymentIntentIDNotIn applies the NotIn predicate on the "payment_intent_id" field.
func PaymentIntentIDNotIn(vs ...int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldPaymentIntentID, vs...))
}

// PaymentMethodEQ applies the EQ predicate on the "payment_method" field.
func PaymentMethodEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentMethodNEQ applies the NEQ predicate on the "payment_method" field.
func PaymentMethodNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldPaymentMethod, v))
}

// PaymentMethodIn applies the In predicate on the "payment_method" field.
func PaymentMethodIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldPaymentMethod, vs...))
}

// PaymentMethodNotIn applies the NotIn predicate on the "payment_method" field.
func PaymentMethodNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldPaymentMethod, vs...))
}

// PaymentMethodGT applies the GT predicate on the "payment_method" field.
func PaymentMethodGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldPaymentMethod, v))
}

// PaymentMethodGTE applies the GTE predicate on the "payment_method" field.
func PaymentMethodGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldPaymentMethod, v))
}

// PaymentMethodLT applies the LT predicate on the "payment_method" field.
func PaymentMethodLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldPaymentMethod, v))
}

// PaymentMethodLTE applies the LTE predicate on the "payment_method" field.
func PaymentMethodLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldPaymentMethod, v))
}

// PaymentMethodContains applies the Contains predicate on the "payment_method" field.
func PaymentMethodContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldPaymentMethod, v))
}

// PaymentMethodHasPrefix applies the HasPrefix predicate on the "payment_method" field.
func PaymentMethodHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldPaymentMethod, v))
}

// PaymentMethodHasSuffix applies the HasSuffix predicate on the "payment_method" field.
func PaymentMethodHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldPaymentMethod, v))
}

// PaymentMethodEqualFold applies the EqualFold predicate on the "payment_method" field.
func PaymentMethodEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldPaymentMethod, v))
}

// PaymentMethodContainsFold applies the ContainsFold predicate on the "payment_method" field.
func PaymentMethodContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldPaymentMethod, v))
}

// ProcessorEQ applies the EQ predicate on the "processor" field.
func ProcessorEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldProcessor, v))
}

// ProcessorNEQ applies the NEQ predicate on the "processor" field.
func ProcessorNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldProcessor, v))
}

// ProcessorIn applies the In predicate on the "processor" field.
func ProcessorIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldProcessor, vs...))
}

// ProcessorNotIn applies the NotIn predicate on the "processor" field.
func ProcessorNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldProcessor, vs...))
}

// ProcessorGT applies the GT predicate on the "processor" field.
func ProcessorGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldProcessor, v))
}

// ProcessorGTE applies the GTE predicate on the "processor" field.
func ProcessorGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldProcessor, v))
}

// ProcessorLT applies the LT predicate on the "processor" field.
func ProcessorLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldProcessor, v))
}

// ProcessorLTE applies the LTE predicate on the "processor" field.
func ProcessorLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldProcessor, v))
}

// ProcessorContains applies the Contains predicate on the "processor" field.
func ProcessorContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldProcessor, v))
}

// ProcessorHasPrefix applies the HasPrefix predicate on the "processor" field.
func ProcessorHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldProcessor, v))
}

// ProcessorHasSuffix applies the HasSuffix predicate on the "processor" field.
func ProcessorHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldProcessor, v))
}

// ProcessorIsNil applies the IsNil predicate on the "processor" field.
func ProcessorIsNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIsNull(FieldProcessor))
}

// ProcessorNotNil applies the NotNil predicate on the "processor" field.
func ProcessorNotNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotNull(FieldProcessor))
}

// ProcessorEqualFold applies the EqualFold predicate on the "processor" field.
func ProcessorEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldProcessor, v))
}

// ProcessorContainsFold applies the ContainsFold predicate on the "processor" field.
func ProcessorContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldProcessor, v))
}

// ProcessorRefEQ applies the EQ predicate on the "processor_ref" field.
func ProcessorRefEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldProcessorRef, v))
}

// ProcessorRefNEQ applies the NEQ predicate on the "processor_ref" field.
func ProcessorRefNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldProcessorRef, v))
}

// ProcessorRefIn applies the In predicate on the "processor_ref" field.
func ProcessorRefIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldProcessorRef, vs...))
}

// ProcessorRefNotIn applies the NotIn predicate on the "processor_ref" field.
func ProcessorRefNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldProcessorRef, vs...))
}

// ProcessorRefGT applies the GT predicate on the "processor_ref" field.
func ProcessorRefGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldProcessorRef, v))
}

// ProcessorRefGTE applies the GTE predicate on the "processor_ref" field.
func ProcessorRefGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldProcessorRef, v))
}

// ProcessorRefLT applies the LT predicate on the "processor_ref" field.
func ProcessorRefLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldProcessorRef, v))
}

// ProcessorRefLTE applies the LTE predicate on the "processor_ref" field.
func ProcessorRefLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldProcessorRef, v))
}

// ProcessorRefContains applies the Contains predicate on the "processor_ref" field.
func ProcessorRefContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldProcessorRef, v))
}

// ProcessorRefHasPrefix applies the HasPrefix predicate on the "processor_ref" field.
func ProcessorRefHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldProcessorRef, v))
}

// ProcessorRefHasSuffix applies the HasSuffix predicate on the "processor_ref" field.
func ProcessorRefHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldProcessorRef, v))
}

// ProcessorRefIsNil applies the IsNil predicate on the "processor_ref" field.
func ProcessorRefIsNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIsNull(FieldProcessorRef))
}

// ProcessorRefNotNil applies the NotNil predicate on the "processor_ref" field.
func ProcessorRefNotNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotNull(FieldProcessorRef))
}

// ProcessorRefEqualFold applies the EqualFold predicate on the "processor_ref" field.
func ProcessorRefEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldProcessorRef, v))
}

// ProcessorRefContainsFold applies the ContainsFold predicate on the "processor_ref" field.
func ProcessorRefContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldProcessorRef, v))
}

// MetadataEQ applies the EQ predicate on the "metadata" field.
func MetadataEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldMetadata, v))
}

// MetadataNEQ applies the NEQ predicate on the "metadata" field.
func MetadataNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldMetadata, v))
}

// MetadataIn applies the In predicate on the "metadata" field.
func MetadataIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldMetadata, vs...))
}

// MetadataNotIn applies the NotIn predicate on the "metadata" field.
func MetadataNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldMetadata, vs...))
}

// MetadataGT applies the GT predicate on the "metadata" field.
func MetadataGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldMetadata, v))
}

// MetadataGTE applies the GTE predicate on the "metadata" field.
func MetadataGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldMetadata, v))
}

// MetadataLT applies the LT predicate on the "metadata" field.
func MetadataLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldMetadata, v))
}

// MetadataLTE applies the LTE predicate on the "metadata" field.
func MetadataLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldMetadata, v))
}

// MetadataContains applies the Contains predicate on the "metadata" field.
func MetadataContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldMetadata, v))
}

// MetadataHasPrefix applies the HasPrefix predicate on the "metadata" field.
func MetadataHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldMetadata, v))
}

// MetadataHasSuffix applies the HasSuffix predicate on the "metadata" field.
func MetadataHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldMetadata, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotNull(FieldMetadata))
}

// MetadataEqualFold applies the EqualFold predicate on the "metadata" field.
func MetadataEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldMetadata, v))
}

// MetadataContainsFold applies the ContainsFold predicate on the "metadata" field.
func MetadataContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldMetadata, v))
}

// PaymentHashEQ applies the EQ predicate on the "payment_hash" field.
func PaymentHashEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldPaymentHash, v))
}

// PaymentHashNEQ applies the NEQ predicate on the "payment_hash" field.
func PaymentHashNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldPaymentHash, v))
}

// PaymentHashIn applies the In predicate on the "payment_hash" field.
func PaymentHashIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldPaymentHash, vs...))
}

// PaymentHashNotIn applies the NotIn predicate on the "payment_hash" field.
func PaymentHashNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldPaymentHash, vs...))
}

// PaymentHashGT applies the GT predicate on the "payment_hash" field.
func PaymentHashGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldPaymentHash, v))
}

// PaymentHashGTE applies the GTE predicate on the "payment_hash" field.
func PaymentHashGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldPaymentHash, v))
}

// PaymentHashLT applies the LT predicate on the "payment_hash" field.
func PaymentHashLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldPaymentHash, v))
}

// PaymentHashLTE applies the LTE predicate on the "payment_hash" field.
func PaymentHashLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldPaymentHash, v))
}

// PaymentHashContains applies the Contains predicate on the "payment_hash" field.
func PaymentHashContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldPaymentHash, v))
}

// PaymentHashHasPrefix applies the HasPrefix predicate on the "payment_hash" field.
func PaymentHashHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldPaymentHash, v))
}

// PaymentHashHasSuffix applies the HasSuffix predicate on the "payment_hash" field.
func PaymentHashHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldPaymentHash, v))
}

// PaymentHashIsNil applies the IsNil predicate on the "payment_hash" field.
func PaymentHashIsNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIsNull(FieldPaymentHash))
}

// PaymentHashNotNil applies the NotNil predicate on the "payment_hash" field.
func PaymentHashNotNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotNull(FieldPaymentHash))
}

// PaymentHashEqualFold applies the EqualFold predicate on the "payment_hash" field.
func PaymentHashEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldPaymentHash, v))
}

// PaymentHashContainsFold applies the ContainsFold predicate on the "payment_hash" field.
func PaymentHashContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldPaymentHash, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldStatus, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldCurrency, v))
}

// AddedOnEQ applies the EQ predicate on the "added_on" field.
func AddedOnEQ(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldAddedOn, v))
}

// AddedOnNEQ applies the NEQ predicate on the "added_on" field.
func AddedOnNEQ(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldAddedOn, v))
}

// AddedOnIn applies the In predicate on the "added_on" field.
func AddedOnIn(vs ...time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldAddedOn, vs...))
}

// AddedOnNotIn applies the NotIn predicate on the "added_on" field.
func AddedOnNotIn(vs ...time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldAddedOn, vs...))
}

// AddedOnGT applies the GT predicate on the "added_on" field.
func AddedOnGT(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldAddedOn, v))
}

// AddedOnGTE applies the GTE predicate on the "added_on" field.
func AddedOnGTE(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldAddedOn, v))
}

// AddedOnLT applies the LT predicate on the "added_on" field.
func AddedOnLT(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldAddedOn, v))
}

// AddedOnLTE applies the LTE predicate on the "added_on" field.
func AddedOnLTE(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldAddedOn, v))
}

// AddedOnIsNil applies the IsNil predicate on the "added_on" field.
func AddedOnIsNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIsNull(FieldAddedOn))
}

// AddedOnNotNil applies the NotNil predicate on the "added_on" field.
func AddedOnNotNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotNull(FieldAddedOn))
}

// UpdatedOnEQ applies the EQ predicate on the "updated_on" field.
func UpdatedOnEQ(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldUpdatedOn, v))
}

// UpdatedOnNEQ applies the NEQ predicate on the "updated_on" field.
func UpdatedOnNEQ(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldUpdatedOn, v))
}

// UpdatedOnIn applies the In predicate on the "updated_on" field.
func UpdatedOnIn(vs ...time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldUpdatedOn, vs...))
}

// UpdatedOnNotIn applies the NotIn predicate on the "updated_on" field.
func UpdatedOnNotIn(vs ...time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldUpdatedOn, vs...))
}

// UpdatedOnGT applies the GT predicate on the "updated_on" field.
func UpdatedOnGT(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldUpdatedOn, v))
}

// UpdatedOnGTE applies the GTE predicate on the "updated_on" field.
func UpdatedOnGTE(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldUpdatedOn, v))
}

// UpdatedOnLT applies the LT predicate on the "updated_on" field.
func UpdatedOnLT(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldUpdatedOn, v))
}

// UpdatedOnLTE applies the LTE predicate on the "updated_on" field.
func UpdatedOnLTE(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldUpdatedOn, v))
}

// UpdatedOnIsNil applies the IsNil predicate on the "updated_on" field.
func UpdatedOnIsNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIsNull(FieldUpdatedOn))
}

// UpdatedOnNotNil applies the NotNil predicate on the "updated_on" field.
func UpdatedOnNotNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotNull(FieldUpdatedOn))
}

// HasPaymentIntent applies the HasEdge predicate on the "payment_intent" edge.
func HasPaymentIntent() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentIntentTable, PaymentIntentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentIntentWith applies the HasEdge predicate on the "payment_intent" edge with a given conditions (other predicates).
func HasPaymentIntentWith(preds ...predicate.PaymentIntent) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(func(s *sql.Selector) {
		step := newPaymentIntentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentAttempt) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentAttempt) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentAttempt) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(func(s *sql.Selector) {
		p(s.Not())
	})
}
