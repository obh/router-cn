// Code generated by ent, DO NOT EDIT.

package paymentattempt

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the paymentattempt type in the database.
	Label = "payment_attempt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPaymentIntentID holds the string denoting the payment_intent_id field in the database.
	FieldPaymentIntentID = "payment_intent_id"
	// FieldPaymentMethod holds the string denoting the payment_method field in the database.
	FieldPaymentMethod = "payment_method"
	// FieldProcessor holds the string denoting the processor field in the database.
	FieldProcessor = "processor"
	// FieldProcessorRef holds the string denoting the processor_ref field in the database.
	FieldProcessorRef = "processor_ref"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldPaymentHash holds the string denoting the payment_hash field in the database.
	FieldPaymentHash = "payment_hash"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldAddedOn holds the string denoting the added_on field in the database.
	FieldAddedOn = "added_on"
	// FieldUpdatedOn holds the string denoting the updated_on field in the database.
	FieldUpdatedOn = "updated_on"
	// EdgePaymentIntent holds the string denoting the payment_intent edge name in mutations.
	EdgePaymentIntent = "payment_intent"
	// Table holds the table name of the paymentattempt in the database.
	Table = "paymentattempt"
	// PaymentIntentTable is the table that holds the payment_intent relation/edge.
	PaymentIntentTable = "paymentattempt"
	// PaymentIntentInverseTable is the table name for the PaymentIntent entity.
	// It exists in this package in order to avoid circular dependency with the "paymentintent" package.
	PaymentIntentInverseTable = "paymentintent"
	// PaymentIntentColumn is the table column denoting the payment_intent relation/edge.
	PaymentIntentColumn = "payment_intent_id"
)

// Columns holds all SQL columns for paymentattempt fields.
var Columns = []string{
	FieldID,
	FieldPaymentIntentID,
	FieldPaymentMethod,
	FieldProcessor,
	FieldProcessorRef,
	FieldMetadata,
	FieldPaymentHash,
	FieldStatus,
	FieldAmount,
	FieldCurrency,
	FieldAddedOn,
	FieldUpdatedOn,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PaymentAttempt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPaymentIntentID orders the results by the payment_intent_id field.
func ByPaymentIntentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentIntentID, opts...).ToFunc()
}

// ByPaymentMethod orders the results by the payment_method field.
func ByPaymentMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentMethod, opts...).ToFunc()
}

// ByProcessor orders the results by the processor field.
func ByProcessor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessor, opts...).ToFunc()
}

// ByProcessorRef orders the results by the processor_ref field.
func ByProcessorRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessorRef, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByPaymentHash orders the results by the payment_hash field.
func ByPaymentHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentHash, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByAddedOn orders the results by the added_on field.
func ByAddedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddedOn, opts...).ToFunc()
}

// ByUpdatedOn orders the results by the updated_on field.
func ByUpdatedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedOn, opts...).ToFunc()
}

// ByPaymentIntentField orders the results by payment_intent field.
func ByPaymentIntentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentIntentStep(), sql.OrderByField(field, opts...))
	}
}
func newPaymentIntentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentIntentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PaymentIntentTable, PaymentIntentColumn),
	)
}
